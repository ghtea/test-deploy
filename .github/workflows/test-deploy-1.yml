name: Deploy

on:
  push:
    branches:
      - test-deploy-1

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-2
  AWS_ROLE_ARN: arn:aws:iam::519327379961:role/github
  AWS_ECR_REPO: test-deploy-1
  TASK_DEFINITION: infra/task-definitions/test-deploy-1.latest.json
  CONTAINER_NAME: test-deploy-1
  CLUSTER: test-deploy-1

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check Out
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.AWS_ECR_REPO }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: web-nodejs
          cluster: ${{ env.CLUSTER }}
          wait-for-service-stability: true
